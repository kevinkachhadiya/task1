@model task1.Models.UserData

@{
    ViewBag.Title = "Edit";

}

<h2>Edit---></h2>

<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
           
            @using (Html.BeginForm("Edit", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()

            <div class="container" style="max-width:auto">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Edit User</h5>
                </div>

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                @Html.HiddenFor(c => c.user_id)

                <div class="row mb-3 mt-3">
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.FirstName, new { @class = "control-label" })
                    </div>
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Your Firstname" } })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.LastName, new { @class = "control-label" })
                    </div>
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Your Lastname" } })
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.Email, new { @class = "control-label" })
                    </div>
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Your Email" } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.MobileNo, new { @class = "control-label" })
                    </div>
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.MobileNo, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Your Mobile_No" } })
                        @Html.ValidationMessageFor(model => model.MobileNo, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.Gender1, new { @class = "control-label" })
                    </div>
                    <div class="col-md-8 d-flex">
                        @foreach (var gender in Enum.GetValues(typeof(task1.Models.Gender)))
                        {
                            <div class="form-check me-4">
                                @Html.RadioButtonFor(model => model.Gender1, gender, new { @class = "form-check-input" })
                                <label class="form-check-label ms-2">@gender</label>
                            </div>
                        }
                    </div>
                    <div class="col-md-6 offset-md-3">
                        @Html.ValidationMessageFor(model => model.Gender1, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-3">
                        Dob :
                    </div>
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Dob, new
                        {
                            htmlAttributes = new
                            {
                                @class = "form-control",
                                type = "date",
                                Max = DateTime.Now.AddYears(-18).ToString("yyyy-MM-dd")
                            }
                        })
                        @Html.ValidationMessageFor(model => model.Dob, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.Password, new { @class = "control-label" })
                    </div>
                    <div class="col-md-8">
                        @Html.PasswordFor(model => model.Password, new { @class = "form-control", placeholder = "Enter Your Password", value = Model.Password })
                        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.ConfirmPassword, new { @class = "control-label" })
                    </div>
                    <div class="col-md-8">
                        @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control", placeholder = "Enter Your Confirm Password", value = Model.ConfirmPassword })
                        @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="row mb-3">
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.Address, new { @class = "control-label" })
                    </div>
                    <div class="col-md-8">
                        @Html.TextAreaFor(model => model.Address, new { @class = "form-control", placeholder = "Enter Your Address" })
                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.SelectedCountryId, new { @class = "control-label" })
                    </div>
                    <div class="col-md-8">
                        @Html.DropDownListFor(model => model.SelectedCountryId,
                            Model.CountryList,
                            "Select a Country",
                            new { @class = "form-control", id = "countryDropdown" })
                        @Html.ValidationMessageFor(model => model.SelectedCountryId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.SelectedStateId, new { @class = "control-label" })
                    </div>
                    <div class="col-md-8">
                        @Html.DropDownListFor(model => model.SelectedStateId,
                          Model.StateList,
                            "Select a State",
                            new { @class = "form-control", id = "stateDropdown" })
                        @Html.ValidationMessageFor(model => model.SelectedStateId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.SelectedCityId, new { @class = "control-label" })
                    </div>
                    <div class="col-md-8">
                        @Html.DropDownListFor(model => model.SelectedCityId,
                             Model.CityList,
                            "Select a City",
                            new { @class = "form-control", id = "CityDropdown" })
                        @Html.ValidationMessageFor(model => model.SelectedCityId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-3">
                        <label for="file" class="control-label">Image</label>
                    </div>
                    <div class="col-md-8">
                        <img id="previewImage" src="/Uploads/@Model.ImagePath" alt="Uploaded Image"
                             class="img-thumbnail mb-2"
                             style="width: 150px; height: 150px; display: @(string.IsNullOrEmpty(Model.ImagePath) ? "none" : "block");" />

                        <input type="file" name="file" id="file" class="form-control"
                               accept=".jpg,.jpeg" />
                        <input type="hidden" name="ExistingImage" id="ExistingImage" value="@Model.ImagePath" />
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-11 d-flex justify-content-between">
                        <a href="@Url.Action("ViewUser", "Home")" class="btn btn-secondary mb-3">Back to Dashboard</a>
                        <input type="submit" value="Create" class="btn btn-primary mb-3" />
                    </div>
                </div>


            </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(document).ready(function () {
            $("#stateDropdown").change(function () {
                var StateId = $(this).val();
                if (StateId && StateId != null) {
                    $.ajax({
                        url: '@Url.Action("GetCityByState", "Home")',
                        type: "GET",
                        data: { StateId: StateId },
                        success: function (data) {
                            var CityDropdown = $("#CityDropdown");
                            CityDropdown.empty();
                            CityDropdown.append('<option value="">Select a City</option>');

                            $.each(data, function (index, City) {
                                CityDropdown.append('<option value="' + City.Value + '">' + City.Text + '</option>');
                            });
                        }
                    });
                } else {
                    $("#CityDropdown").empty();
                   
                    $("#CityDropdown").append('<option value="">Select a city </option>');
                }
            });

            $("#countryDropdown").change(function () {
                var countryId = $(this).val();
                if (countryId && countryId != null) {
          $.ajax({
            url: '@Url.Action("GetStatesByCountry", "Home")',
            type: "GET",
            data: { countryId: countryId },
            success: function (data) {
                var stateDropdown = $("#stateDropdown");
                stateDropdown.empty();
                stateDropdown.append('<option value="">Select a State</option>');

                $.each(data, function (index, state) {
                    stateDropdown.append('<option value="' + state.Value + '">' + state.Text + '</option>');
                });
            }
        });
    } else {
                    $("#stateDropdown").empty();
                    $("#stateDropdown").append('<option value="">Select a State</option>');
                    $("#CityDropdown").empty();

                    $("#CityDropdown").append('<option value="">Select a city</option>');
    }
            });

            if ($('#previewImage').length > 0 && $('#previewImage').attr('required') !== "") {
                $('#file').removeAttr('required')

            }
 
            $("#file").change(function (event) {

                var file = event.target.files[0];

                if (file) {
                    var reader = new FileReader();

                    reader.onload = function (e) {
                        $("#previewImage").attr("src", e.target.result);
                        $("#previewImage").show();
                        $('#previewImage').prop('required', true);
                        $('#ExistingImage').val('');
                    };

                    reader.readAsDataURL(file);
                } else {
                    $("#previewImage").hide();
                    $('#previewImage').prop('required', flase);
                }
            });

            $('#exampleModal').modal({
                backdrop: 'static',
                keyboard: false
            });

            $('#exampleModal').on('hide.bs.modal', function (e) {
                if ($('.modal-backdrop').length) {
                    e.preventDefault();
                }
            });

            $('#exampleModal').modal('show')




           
        });


    </script>
}