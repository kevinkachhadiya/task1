@model task1.Models.UserData

@{
    ViewBag.Title = "Index";
}
<h2>Index</h2>

<div class="modal fade" id="CreateModal"  role="dialog" data-backdrop="static" data-keyboard="false" aria-labelledby="exampleModalLabel" aria-hidden="false">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-body">
                @using (Html.BeginForm("Index", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()

                <div class="container" style="max-width:auto">
                    <h5 class="modal-title" id="exampleModalLabel">Create User</h5>
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div class="row mb-3 mt-3">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.FirstName, new { @class = "control-label" })
                        </div>
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Your Firstname" } })
                            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.LastName, new { @class = "control-label" })
                        </div>
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Your Lastname" } })
                            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Email, new { @class = "control-label" })
                        </div>
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Your Email" } })
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.MobileNo, new { @class = "control-label" })
                        </div>
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.MobileNo, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Your Mobile_No" } })
                            @Html.ValidationMessageFor(model => model.MobileNo, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Gender1, new { @class = "control-label" })
                        </div>
                        <div class="col-md-8 d-flex">
                            @foreach (var gender in Enum.GetValues(typeof(task1.Models.Gender)))
                            {
                                <div class="form-check me-4">
                                    @Html.RadioButtonFor(model => model.Gender1, gender, new { @class = "form-check-input" })
                                    <label class="form-check-label ms-2">@gender</label>
                                </div>
                            }
                        </div>
                        <div class="col-md-6 offset-md-3">
                            @Html.ValidationMessageFor(model => model.Gender1, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-3">
                            Dob :
                        </div>
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.Dob, new
                            {
                                htmlAttributes = new
                                {
                                    @class = "form-control",
                                    type = "date",
                                    Max = DateTime.Now.AddYears(-18).ToString("yyyy-MM-dd")
                                }
                            })
                            @Html.ValidationMessageFor(model => model.Dob, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Password, new { @class = "control-label" })
                        </div>
                        <div class="col-md-8">
                            @Html.PasswordFor(model => model.Password, new { @class = "form-control", placeholder = "Enter Your Password", autocomplete ="new-password"  })
                            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.ConfirmPassword, new { @class = "control-label" })
                        </div>
                        <div class="col-md-8">
                            @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control", placeholder = "Enter Your Confirm Password", autocomplete = "new-password" })
                            @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Address, new { @class = "control-label" })
                        </div>
                        <div class="col-md-8">
                            @Html.TextAreaFor(model => model.Address, new { @class = "form-control", placeholder = "Enter Your Address" })
                            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.SelectedCountryId, new { @class = "control-label" })
                        </div>
                        <div class="col-md-8">
                            @Html.DropDownListFor(model => model.SelectedCountryId,
                                Model.CountryList,
                                "Select a Country",
                                new { @class = "form-control", id = "countryDropdown" })
                            @Html.ValidationMessageFor(model => model.SelectedCountryId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.SelectedStateId, new { @class = "control-label" })
                        </div>
                        <div class="col-md-8">
                            @Html.DropDownListFor(model => model.SelectedStateId,
                              Model.StateList,
                                "Select a State",
                                new { @class = "form-control", id = "stateDropdown" })
                            @Html.ValidationMessageFor(model => model.SelectedStateId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.SelectedCityId, new { @class = "control-label" })
                        </div>
                        <div class="col-md-8">
                            @Html.DropDownListFor(model => model.SelectedCityId,
                                 Model.CityList,
                                "Select a City",
                                new { @class = "form-control", id = "CityDropdown" })
                            @Html.ValidationMessageFor(model => model.SelectedCityId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-3">
                            <label for="file" class="control-label">Image</label>
                        </div>
                        <div class="col-md-8">
                            <img id="previewImage" src="" alt="Uploaded Image"
                                 class="img-thumbnail mb-2"
                                 style="width: 150px; height: 150px; display: @(string.IsNullOrEmpty(Model.ImagePath) ? "none" : "block");" />

                            <input type="file" name="file" id="file" class="form-control" required="required"
                                   accept=".jpg,.jpeg" />
                        </div>
                    </div>
                    <hr />
                    <div class="row mb-3">
                        <div class="col-md-3">
                            @Html.ActionLink("Back to List", "ViewUser")
                        </div>
                        <div class="col-md-8 text-end">
                            <input type="submit" value="Create" class="btn btn-primary" />
                        </div>
                    </div>

                </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

<script>
        $(document).ready(function () {
            $("#stateDropdown").change(function () {
                var StateId = $(this).val();
                if (StateId) {
                    $.ajax({
                        url: '@Url.Action("GetCityByState", "Home")',
                        type: "GET",
                        data: { StateId: StateId },
                        success: function (data) {
                            var CityDropdown = $("#CityDropdown");
                            CityDropdown.empty();
                            CityDropdown.append('<option value="">Select a City</option>');

                            $.each(data, function (index, City) {
                                CityDropdown.append('<option value="' + City.Value + '">' + City.Text + '</option>');
                            });
                        }
                    });
                } else {
                    $("#CityDropdown").empty();
                    $("#CityDropdown").append('<option value="">Select a city</option>');
                }
            });

            $("#countryDropdown").change(function () {
               var countryId = $(this).val();
                if (countryId) {
          $.ajax({
            url: '@Url.Action("GetStatesByCountry", "Home")',
            type: "GET",
            data: { countryId: countryId },
            success: function (data) {
                var stateDropdown = $("#stateDropdown");
                stateDropdown.empty();
                stateDropdown.append('<option value="">Select a State</option>');

                $.each(data, function (index, state) {
                    stateDropdown.append('<option value="' + state.Value + '">' + state.Text + '</option>');
                });
            }
        });
    } else {
        $("#stateDropdown").empty();
                    $("#stateDropdown").append('<option value="">Select a State</option>');
                    $("#CityDropdown").empty();
                    $("#CityDropdown").append('<option value="">Select a city</option>');

    }
            });

            $("#file").change(function (event) {
                var file = event.target.files[0];

                if (file) {
                    var reader = new FileReader();

                    reader.onload = function (e)
                    {
                        $("#previewImage").attr("src", e.target.result);
                        $("#previewImage").show();
                    };

                    reader.readAsDataURL(file);
                } else {
                    $("#previewImage").hide();
                }
            });


            $('#CreateModal').modal({
                backdrop: 'static',
                keyboard: false
            });

            $('#CreateModal').on('hide.bs.modal', function (e) {
                if ($('.modal-backdrop').length) {
                    e.preventDefault();
                }
            });
            $("#CreateModal").modal('show')       
        });
</script>
}
<style>
    .container {
        max-width: 700px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .text-danger {
        display: block;
        margin-top: 5px;
    }

    .form-check {
        display: flex;
        align-items: center;
    }
    .modal fade {
        overflow-x: hidden;
        overflow-y: scroll;
        position: fixed !important;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.4);
        opacity: 0;
        transition: opacity .2s ease-in-out;
        display:block;
    }

 
</style>
