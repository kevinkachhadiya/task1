
@{
    ViewBag.Title = "Login";
}

<h2>Login</h2>

<div class="login-container">
    <form class="login-form">
        <div class="form-group">
            <input type="text" onkeyup="UserName(this)" required>
            <label class="label1" id="uname">Username</label>
        </div>
        <div class="form-group">
            <input type="password"  onkeyup="PassWord(this)" required>
            <label class="label1" id="pwd">Password</label>
        </div>
        <button type="submit" id="button1">Login</button>
    </form>
</div>

<div class="">
    <form class="register-form">
        <div class="form-group">
            <input type="text"  readonly>
            <label class="label" id="fname">First Name</label>
        </div>
        <div class="form-group">
            <input type="text"  readonly>
            <label class="label" id="lname">Last Name</label>
        </div>
        <div class="form-group">
            <input type="email"  readonly>
            <label class="label" id="email">Email</label>
        </div>
        <div class="form-group">
            <input type="password" readonly>
            <label class="label" id="pwd">Password</label>
        </div>
        <div class="form-group">
            <input type="tel"  readonly>
            <label class="label" id="mobile">Mobile No</label>
        </div>
        <div class="form-group">
            <input type="text" readonly>
            <label class="label" id="addr">Address</label>
        </div>
        <div class="form-group">
            <input type="date" readonly>
            <label class="label" id="dob">Date of Birth</label>
        </div>
    
        <div class="form-group">
            <label for="imageUpload">Profile Image</label>
            <img id="imagePreview" src="" alt="Image Preview" style="display: none; max-width: 200px; margin-top: 10px;">
        </div>
        <button type="submit" id="button2">Reset</button>
       
    </form>
</div>


<style>
   /* Default light mode styles */

.login-container {
    background-color: rgba(255, 255, 255, 0.1); /* Transparent white background */
    padding: 5%; /* Responsive padding */
    border-radius: 10px;
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
    backdrop-filter: blur(10px); /* Creates frosted glass effect */
    width: 90%; /* Responsive width */
    max-width: 400px; /* Maximum width for larger screens */
}

    .login-container {
        transition: opacity 1s ease-in-out; /* Smooth fade over 1 second */
        opacity: 1; /* Default visible state */
    }

        .login-container.hidden {
            opacity: 0; /* Faded out state */
        }


.login-form {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.form-group {
    position: relative;
}

input {
    width: 100%; /* Full width of the container */
    padding: 12px;
    border: none;
    border-bottom: 2px solid rgba(0, 0, 0, 0.5); /* Darker border for light mode */
    background: transparent;
    color: black; /* Text color for light mode */
    font-size: 1rem; /* Responsive font size */
    transition: 0.3s;
}

input:focus {
    outline: none;
    border-bottom: 2px solid rgb(0, 86, 179); /* Accent color for light mode */
}

input::placeholder {
    color: rgba(0, 0, 0, 0.7); /* Placeholder color for light mode */
}

#button1 {
    padding: 12px;
    background: rgb(0, 86, 179); /* Button color for light mode */
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1rem; /* Responsive font size */
    font-weight: 600;
    transition: 0.3s;
    color: white; /* Button text color */
    width: 100%; /* Full width of the container */
}

#button1:hover {
    background: rgb(0, 70, 150); /* Button hover color for light mode */
}
    .error {
        color: red;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        display: block;
        max-width: 280px;
    }

    /* Default label styling (unchanged) */
    .label1 {
        position: absolute;
        left: 12px;
        top: 50%;
        transform: translateY(-50%);
        pointer-events: none;
        transition: 0.3s;
        font-size: 1rem;

    }

  input:focus ~ .label1:not(.error), input:valid ~ .label1:not(.error) {
        top: -10px;
       font-size: 1rem;
        color: rgb(0, 86, 179);
    }

    /* Keep label in place when it has an error (empty or invalid) */
    input:focus ~ .label1.error,
    input:valid ~ .label1.error {
        top: -10px;
        font-size: 1rem; /* Keep original size */
    }

    /* Dark mode adjustments */
    .dark .error {
        color: red;
    }

    .dark input:focus ~ .label1:not(.error),
    .dark input:valid ~ .label1:not(.error) {
        color: rgb(100, 150, 255);
    }

    .dark input:focus ~ .label1.error,
    .dark input:valid ~ .label1.error {
        top: -10px;

        font-size: 1rem;
    }


/* Dark mode styles */
.dark .login-container {
    background-color: rgba(0, 0, 0, 0.); /* Transparent black background */
    box-shadow: 0 15px 35px rgba(255, 255, 255, 0.1); /* Lighter shadow for dark mode */
}

.dark input {
    border-bottom: 2px solid rgba(255, 255, 255, 0.5); /* Lighter border for dark mode */
    color: white; /* Text color for dark mode */
}

.dark input:focus {
    border-bottom: 2px solid rgb(100, 150, 255); /* Accent color for dark mode */
}

.dark input::placeholder {
    color: rgba(255, 255, 255, 0.7); /* Placeholder color for dark mode */
}
    .dark #button1:hover {
        background: rgb(80, 130, 235); /* Button hover color for dark mode */
    }




/* Media Queries for Responsiveness */
@@media (max-width: 768px) {
    .login-container {
        padding: 10%; /* More padding for smaller screens */
        width: 80%; /* Wider container for smaller screens */
    }

    input {
        font-size: 0.9rem; /* Smaller font size for smaller screens */
    }

    button {
        font-size: 0.9rem; /* Smaller font size for smaller screens */
    }

    .label1 {
        font-size: 0.9rem; /* Smaller font size for smaller screens */
    }

    input:focus ~ .label1,
    input:valid ~ .label1 {
        font-size: 0.7rem; /* Smaller font size for focused labels on smaller screens */
    }
}

@@media (max-width: 480px) {
    .login-container {
        padding: 15%; /* Even more padding for very small screens */
        width: 90%; /* Wider container for very small screens */
    }

    input {
        font-size: 0.8rem; /* Smaller font size for very small screens */
    }

    button {
        font-size: 0.8rem; /* Smaller font size for very small screens */
    }

    .label1 {
        font-size: 0.8rem; /* Smaller font size for very small screens */
    }

    input:focus ~ .label1,
    input:valid ~ .label1 {
        font-size: 0.6rem; /* Smaller font size for focused labels on very small screens */
    }
}

/* General Form Styling */
.register-form {
    width: 100%;
    max-width: 400px;
    margin: auto;
    padding: 20px;
    background: rgba(255, 255, 255, 0.2); /* Light frosted glass effect */
    border-radius: 10px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(10px);
    display: flex;
    flex-direction: column;
    gap: 20px;
}

/* Form Group */
.form-group {
    position: relative;
    display: flex;
    flex-direction: column;
}

/* Input Fields */
.register-form input {
    width: 100%;
    padding: 12px;
    border: none;
    border-bottom: 2px solid rgba(0, 0, 0, 0.5);
    background: transparent;
    font-size: 1rem;
    color: black;
    transition: border-bottom 0.3s;
}

.register-form input:focus {
    outline: none;
    border-bottom: 2px solid rgb(0, 86, 179);
}

/* Floating Labels */
.label {
    position: absolute;
    top: 12px;
    left: 12px;
    font-size: 1rem;
    color: rgba(0, 0, 0, 0.7);
    transition: 0.3s;
    pointer-events: none;
}

input:focus ~ .label,
input:not(:placeholder-shown) ~ .label {
    top: -10px;
    left: 10px;
    font-size: 0.8rem;
    color: rgb(0, 86, 179);
}

/* Readonly Fields */
input[readonly] {
    background: rgba(200, 200, 200, 0.2);
    cursor: not-allowed;
}

/* File Upload */
#imageUpload {
    margin-top: 10px;
}

#imagePreview {
    display: none;
    max-width: 100%;
    margin-top: 10px;
    border-radius: 5px;
}

/* Submit Button */
#button2 {
    padding: 12px;
    background: rgb(0, 86, 179);
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 600;
    transition: 0.3s;
    color: white;
    width: 100%;
}

#button2:hover {
    background: rgb(0, 70, 150);
}

/* Dark Mode */
.dark .register-form {
    background: rgba(0, 0, 0, 0.1);
    color: white;
}

.dark input {
    border-bottom: 2px solid rgba(255, 255, 255, 0.5);
    color: white;
}

.dark input:focus {
    border-bottom: 2px solid rgb(100, 150, 255);
}

.dark .label {
    color: rgba(255, 255, 255, 0.7);
}

.dark input:focus ~ .label,
.dark input:not(:placeholder-shown) ~ .label {
    color: rgb(100, 150, 255);
}

.dark #button2 {
    background: rgb(100, 150, 255);
}

.dark #button2:hover {
    background: rgb(80, 130, 235);
}

/* Responsive */
@@media (max-width: 768px) {
    .register-form {
        width: 90%;
    }

    .label {
        font-size: 0.9rem;
    }
}

@@media (max-width: 480px) {
    .register-form {
        width: 100%;
        padding: 15px;
    }

    .label {
        font-size: 0.8rem;
    }
}

  
</style>

<script>
    $(document).ready(function () {

        var jwtToken = localStorage.getItem('AuthToken');
        console.log(jwtToken);


        $.ajax({
            url: '@Url.Action("validtoken", "Home")',
            type: 'POST',
            data: JSON.stringify({ token: jwtToken }),
            contentType: "application/json",
            dataType: "json",

            success: function (response) {

                if (response.success) {

                    const loginContainer = document.querySelector('.login-container');
                    loginContainer.classList.add('hidden');


                    loginContainer.style.display = 'none';

                }
                else
                {

                   
                }

            }

        });

       
    });

    $(document).ready(function () {

        $(".register-form").css("display", "none");

        document.body.appendChild(globalAlertContainer);


        $(".login-form").on("submit", function (event) {
            event.preventDefault(); // Prevents the form from submitting (optional, for testing)
            const username = $('input[type="text"]').val();
            const password = $('input[type="password"]').val()


            const formData = {
                Email: username,
                ConfirmPassword: password
            };


            $.ajax({
                url: '@Url.Action("UserLogin", "Home")',
                type: 'POST',
                data: JSON.stringify(formData),
                contentType: "application/json",
                dataType: "json",

                success: function (response) {

                    if (response.success) {

                        localStorage.setItem('AuthToken', response.message);

                        const loginContainer = document.querySelector('.login-container');
                        loginContainer.classList.add('hidden');
                        showAlert("Successfully Loged", "success", 1900);


                        setTimeout(() => {
                            loginContainer.style.display = 'none';
                            $(".register-form").css("display", "");

                        }, 1900);
                    }
                    else {
             
                        showAlert('Login failed: ' + response.message); // Handle failure
                        $(".register-form").css("display", "none");
                    }


                }

            });
        });
    });

   function UserName(input) {
    const $input = $(input);
    const value = $input.val();
    const $errorSpan = $("#uname");
    const emailPattern = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;

    $errorSpan.css("top","-10px");



    if (!value) {
        $errorSpan.text("Email is required").addClass("error"); // Error state
        input.setCustomValidity("Email is required");
        $errorSpan.css("top", "");
    } else if (value.length < 5) {
        $errorSpan.text("Email must be at least 5 characters").addClass("error");
        input.setCustomValidity("Email must be at least 5 characters");
    } else if (!emailPattern.test(value)) {
        $errorSpan.text("Email Invalid Format").addClass("error");
        input.setCustomValidity("Invalid Format");
    } else {
        $errorSpan.text("Username").removeClass("error"); // Valid state
        input.setCustomValidity("");
    }
    }

    function PassWord(input)
    {
        const $input = $(input);
        const value = $input.val();
        $errorSpan = $("#pwd");
        letterPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@@#$%^&*])[A-Za-z\d!@@#$%^&*]{8,}$/;
        $errorSpan.css("top", "-10px");

        if (!value) {
            $errorSpan.text("Password is required").addClass("error");
            input.setCustomValidity("Password is required");
            $errorSpan.css("top", "");
        } else if (value.length < 6) {
            $errorSpan.text("Password must be at least 6 characters").addClass("error");
            input.setCustomValidity("Password must be at least 6 characters");
        } else if (!letterPattern.test(value)) {
            $errorSpan.text("Password : 8+, 1A, 1a, 1#, 1!@@#$%").addClass("error");
            input.setCustomValidity("Password: 8+ chars, 1 upper, 1 lower, 1 digit, 1 special (!@@#$%^&*)");
        } else {
            $errorSpan.text("Password").removeClass("error");
            input.setCustomValidity("");
        }

    }

    // Create the global alert container
    var globalAlertContainer = document.createElement("div");
    globalAlertContainer.id = "globalAlertContainer";
    globalAlertContainer.style.position = "fixed";
    globalAlertContainer.style.top = "20px"; // Increased top margin to avoid toolbar
    globalAlertContainer.style.left = "50%";
    globalAlertContainer.style.transform = "translateX(-50%)";
    globalAlertContainer.style.zIndex = "1100"; // Ensure it's above the modal and toolbar
    globalAlertContainer.style.width = "400px";
    globalAlertContainer.style.maxWidth = "90%";
    globalAlertContainer.style.display = "flex";
    globalAlertContainer.style.flexDirection = "column";
    globalAlertContainer.style.alignItems = "center";
    // Append to the body

    function customAlert(message, delayInSeconds) {
        setTimeout(() => {
            alert(message);
        }, delayInSeconds * 1000);
    }

    function showAlert(message, type = "danger", duration = 3000) {
        const alertDiv = document.createElement("div");
        alertDiv.classList.add("alert", `alert-${type}`, "shadow-lg", "p-3", "rounded", "animated-alert");
        alertDiv.style.position = "relative";
        alertDiv.style.marginBottom = "10px";
        alertDiv.style.opacity = "0";
        alertDiv.style.transform = "scale(0.9)";
        alertDiv.style.transition = "opacity 0.3s ease, transform 0.3s ease";
        alertDiv.style.width = "100%";
        alertDiv.style.maxWidth = "400px";
        alertDiv.style.boxShadow = "0px 4px 10px rgba(0, 0, 0, 0.1)";
        alertDiv.style.borderLeft = `5px solid ${type === "danger" ? "#dc3545" : type === "warning" ? "#ffc107" : "#28a745"}`;
        alertDiv.style.backgroundColor = "#ffffff"; // Explicit background color
        alertDiv.style.color = "#000000"; // Explicit text color for better contrast

        // Progress bar for auto-hide timer
        const progressBar = document.createElement("div");
        progressBar.style.height = "3px";
        progressBar.style.width = "100%";
        progressBar.style.position = "absolute";
        progressBar.style.bottom = "0";
        progressBar.style.left = "0";
        progressBar.style.backgroundColor = type === "danger" ? "#dc3545" : type === "warning" ? "#ffc107" : "#28a745";
        progressBar.style.transition = `width ${duration}ms linear`;

        alertDiv.innerHTML = `
        <div class="d-flex justify-content-between align-items-center">
            <span class="fw-semibold">${message}</span>
            <button type="button" class="btn-close" aria-label="Close"></button>
        </div>
    `;

        alertDiv.appendChild(progressBar);
        globalAlertContainer.appendChild(alertDiv);

        // Show the alert with animation
        setTimeout(() => {
            alertDiv.style.opacity = "1";
            alertDiv.style.transform = "scale(1)";
            progressBar.style.width = "0"; // Progress bar animation
        }, 100);

        // Auto-hide after specified duration
        setTimeout(() => {
            alertDiv.style.opacity = "0";
            alertDiv.style.transform = "scale(0.9)";
            setTimeout(() => alertDiv.remove(), 500);
        }, duration);

        // Close button event
        alertDiv.querySelector(".btn-close").addEventListener("click", function () {
            alertDiv.style.opacity = "0";
            alertDiv.style.transform = "scale(0.9)";
            setTimeout(() => alertDiv.remove(), 500);
        });
    }

    function showCustomConfirm(userId, callback) {

        document.getElementById("userIdPlaceholder").textContent = userId;


        const confirmModal = new bootstrap.Modal(document.getElementById("confirmModal"));
        confirmModal.show();

        document.getElementById("confirmDelete").onclick = function () {
            confirmModal.hide(); // Hide the modal
            callback(true); // User confirmed
        };

        // Handle the "Cancel" button click or modal close
        document.getElementById("confirmModal").addEventListener("hidden.bs.modal", function () {
            callback(false); // User canceled
        });
    }

</script>