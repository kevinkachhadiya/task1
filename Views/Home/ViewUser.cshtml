@model IEnumerable<task1.Models.UserData>
@{

    ViewBag.Title = "ViewUser";
    int i = 1;
    var item = new task1.Models.UserData()
    {
        CountryList = new List<SelectListItem>(),
        StateList = new List<SelectListItem>(),
        CityList = new List<SelectListItem>()

    };
}


<h2>ViewUser</h2>
<div class="row mb-3">
    <div class="col-md-8">
        <input type="text" alt="search user" id="search" placeholder="Searching by name,city,gender etc..  " class="col-6 form-control" />
    </div>
</div>
<div class="mb-3 col">

</div>
<p>
    <button type="button" class="btn btn-outline-success" id="create_user">Create User</button>
</p>
<div class="table-responsive">
    <table class="table table-striped table-bordered" id="viewtable">
        <thead class="table-light">
            <tr style="font-size:14px;">
                <th>#</th>
                <th>FirstName</th>
                <th>LastName</th>
                <th>Email</th>
                <th>MobileNo</th>
                <th>Gender</th>
                <th>Dob</th>
                <th>Address</th>
                <th>Image</th>
                <th>@Html.Label("Country")</th>
                <th>@Html.Label("State")</th>
                <th>@Html.Label("City")</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody class="align-content-center">
            @if (Model != null && Model.Any())
            {
                foreach (var Modelitem in Model)
                {

                    <tr>
                        <td>@i</td>
                        <td>@Html.DisplayFor(modelItem => Modelitem.FirstName)</td>
                        <td>@Html.DisplayFor(modelItem => Modelitem.LastName)</td>
                        <td>@Html.DisplayFor(modelItem => Modelitem.Email)</td>
                        <td>@Html.DisplayFor(modelItem => Modelitem.MobileNo)</td>
                        <td>@Html.DisplayFor(modelItem => Modelitem.Gender1)</td>
                        <td>@Html.DisplayFor(modelItem => Modelitem.Dob)</td>
                        <td>@Html.DisplayFor(modelItem => Modelitem.Address)</td>
                        <td>
                            <img src="@Url.Content("~/Uploads/" + Modelitem.ImagePath)" alt="Image"
                                 class="img-fluid rounded"
                                 style="max-width: 80px; height: auto; display: @(string.IsNullOrEmpty(Modelitem.ImagePath) ? "none" : "block");" />
                        </td>
                        <td>@Html.DisplayFor(modelItem => Modelitem.SelectedCountry)</td>
                        <td>@Html.DisplayFor(modelItem => Modelitem.selectedState)</td>
                        <td>@Html.DisplayFor(modelItem => Modelitem.selectedCity)</td>
                        <td>
                            <div class="d-flex gap-2">
                                <button type="button" class="btn btn-outline-primary btn-sm"
                                        onclick="location.href='@Url.Action("Edit", "Home", new { Id = Modelitem.user_id })'">
                                    Edit
                                </button>
                                <button type="button" class="btn btn-outline-warning btn-sm"
                                        onclick="location.href='@Url.Action("Details", "Home", new { Id = Modelitem.user_id })'">
                                    Detail

                                </button>
                                <button type="button" class="btn btn-outline-danger btn-sm" id="delete"
                                        onclick="deleteUser(@Modelitem.user_id)">
                                    Delete
                                </button>

                            </div>
                        </td>
                    </tr>
                    i++;
                }
            }
            else
            {
                <tr>
                    <td colspan="13" class="text-center text-danger"><strong>Zero Record found Please Add Record By Clicking Create User Button</strong></td>
                </tr>

            }
        </tbody>
    </table>
    <nav aria-label="...">
        <ul class="pagination mb-2">
            <li id="prevBtn" class="page-item disabled">
                <span class="page-link">Previous</span>
            </li>
            <li id="1" class="page-item active"><a class="page-link" href="#">1</a></li>
            <li id="2" class="page-item disabled">
                <span class="page-link">
                    2
                </span>
            </li>
            <li id="3" class="page-item"><a class="page-link" href="#">3</a></li>
            <li id="nextBtn" class="page-item">
                <a class="page-link" href="#">Next</a>
            </li>
        </ul>
    </nav>
</div>

<div class="modal fade" id="CreateModal" role="dialog" data-backdrop="static" data-keyboard="false" aria-labelledby="exampleModalLabel" aria-hidden="false">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-body">
                @{

                    using (Html.BeginForm("Index", "Home", FormMethod.Post, new { enctype = "multipart/form-data", id = "CreateNewUser" }))
                    {

                        <div class="container" style="max-width:auto">
                            <h5 class="modal-title" id="exampleModalLabel">Create User</h5>
                            <hr />
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                            <div class="row mb-3 mt-3">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => item.FirstName, new { @class = "control-label" })
                                </div>
                                <div class="col-md-8">
                                    @Html.TextBox("FirstName", null, new { @class = "form-control", placeholder = "Enter Your Firstname" })
                                    @Html.ValidationMessageFor(model => item.FirstName, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => item.LastName, new { @class = "control-label" })
                                </div>
                                <div class="col-md-8">
                                    @Html.TextBox("LastName", null, new { @class = "form-control", placeholder = "Enter Your Lastname" })
                                    @Html.ValidationMessageFor(model => item.LastName, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => item.Email, new { @class = "control-label" })
                                </div>
                                <div class="col-md-8">
                                    @Html.TextBox("Email", null, new { @class = "form-control", placeholder = "Enter Your Email" })
                                    @Html.ValidationMessageFor(model => item.Email, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => item.MobileNo, new { @class = "control-label" })
                                </div>
                                <div class="col-md-8">
                                    @Html.TextBox("MobileNo", null, new { @class = "form-control", placeholder = "Enter Your Mobile_No" })
                                    @Html.ValidationMessageFor(model => item.MobileNo, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => item.Gender1, new { @class = "control-label" })
                                </div>
                                <div class="col-md-8 d-flex">
                                    @foreach (var gender in Enum.GetValues(typeof(task1.Models.Gender)))
                                    {
                                        <div class="form-check me-4">
                                            @Html.RadioButton("Gender1", gender, new { @class = "form-check-input" })
                                            <label class="form-check-label ms-2">@gender</label>
                                        </div>
                                    }
                                </div>
                                <div class="col-md-6 offset-md-3">
                                    @Html.ValidationMessageFor(model => item.Gender1, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-3">
                                    Dob :
                                </div>
                                <div class="col-md-8">
                                    @Html.TextBox("Dob", null, new { @class = "form-control", type = "date", Max = DateTime.Now.AddYears(-18).ToString("yyyy-MM-dd") })
                                    @Html.ValidationMessageFor(model => item.Dob, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => item.Password, new { @class = "control-label" })
                                </div>
                                <div class="col-md-8">
                                    @Html.Password("Password", null, new { @class = "form-control", placeholder = "Enter Your Password", autocomplete = "new-password" })
                                    @Html.ValidationMessageFor(model => item.Password, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => item.ConfirmPassword, new { @class = "control-label" })
                                </div>
                                <div class="col-md-8">
                                    @Html.Password("ConfirmPassword", null, new { @class = "form-control", placeholder = "Enter Your Confirm Password", autocomplete = "new-password" })
                                    @Html.ValidationMessageFor(model => item.ConfirmPassword, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => item.Address, new { @class = "control-label" })
                                </div>
                                <div class="col-md-8">
                                    @Html.TextArea("Address", null, new { @class = "form-control", placeholder = "Enter Your Address" })
                                    @Html.ValidationMessageFor(model => item.Address, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => item.SelectedCountryId, new { @class = "control-label" })
                                </div>
                                <div class="col-md-8">
                                    @Html.DropDownList("SelectedCountryId", item.CountryList, "Select a Country", new { @class = "form-control", id = "countryDropdown" })
                                    @Html.ValidationMessageFor(model => item.SelectedCountryId, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => item.SelectedStateId, new { @class = "control-label" })
                                </div>
                                <div class="col-md-8">
                                    @Html.DropDownList("SelectedStateId", item.StateList, "Select a State", new { @class = "form-control", id = "stateDropdown" })
                                    @Html.ValidationMessageFor(model => item.SelectedStateId, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => item.SelectedCityId, new { @class = "control-label" })
                                </div>
                                <div class="col-md-8">
                                    @Html.DropDownList("SelectedCityId", item.CityList, "Select a City", new { @class = "form-control", id = "CityDropdown" })
                                    @Html.ValidationMessageFor(model => item.SelectedCityId, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-3">
                                    <label for="file" class="control-label">Image</label>
                                </div>
                                <div class="col-md-8">
                                    <img id="previewImage" src="" alt="Uploaded Image"
                                         class="img-thumbnail mb-2"
                                         style="width: 150px; height: 150px; display: @(string.IsNullOrEmpty(item.ImagePath) ? "none" : "block");" />

                                    <input type="file" name="file" id="file" class="form-control" required="required"
                                           accept=".jpg,.jpeg" />
                                </div>
                            </div>
                            <hr />
                            <div class="row mb-3">
                                <div class="col-md-3">
                                    @Html.ActionLink("Back to List", "ViewUser")
                                </div>
                                <div class="col-md-8 text-end">
                                    <input type="submit" value="Create" class="btn btn-primary" />
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script>
        $(document).ready(function () {
            var rowsPerPage = 10;
            var currentPage = 1;
            var $rows = $("#viewtable tbody tr");
            var totalPages = Math.ceil($rows.length / rowsPerPage);


            function showPage(page) {
                $rows.hide();
                var start = (page - 1) * rowsPerPage;
                var end = start + rowsPerPage;
                $rows.slice(start, end).show();
                $("#pageInfo").text("Page " + page + " of " + totalPages);
                $()
            }


            showPage(currentPage);

            $("#1").click(function () {

                    $(this).removeClass("disabled");
                    $(this).removeClass("active");
                    $(this).addClass("active");
                    $("#2").removeClass("active");
                    $("#3").removeClass("active");
                    $("#prevBtn").removeClass("active");
                    $("#nextBtn").removeClass("active");
                    showPage(1);
                    currentPage = 1

            });

            $("#2").click(function () {
                if (1 < totalPages) {

                    $(this).removeClass("disabled");
                    $(this).removeClass("active");
                    $(this).addClass("active");
                    $("#1").removeClass("active");
                    $("#3").removeClass("active");
                    $("#prevBtn").removeClass("active");
                    $("#nextBtn").removeClass("active");
                    showPage(2);
                    currentPage = 2

                }
            });

            $("#3").click(function () {
                if (2 < totalPages) {

                    $(this).removeClass("disabled");
                    $(this).removeClass("active");
                    $(this).addClass("active");
                    $("#1").removeClass("active");
                    $("#2").removeClass("active");
                    $("#prevBtn").removeClass("active");
                    $("#nextBtn").removeClass("active");
                    showPage(3);
                    currentPage = 3
                }
            });
            $("#prevBtn").click(function () {
                if (currentPage > 1) {
                    currentPage--;
                    $(this).removeClass("disabled");
                    $(this).addClass("active");
                    $("#1").removeClass("active");
                    $("#2").removeClass("active");
                    $("#3").removeClass("active");
                    $("#nextBtn").removeClass("active");
                    showPage(currentPage);
                    if (currentPage == 1)
                    {
                        $("#1").addClass("active");
                    }
                    else if (currentPage == 2) {
                        $("#2 ").addClass("active");
                    }
                    else if (currentPage == 3) {
                        $("#3 ").addClass("active");
                    }
                }
            });
            $("#nextBtn").click(function () {
                if (currentPage < totalPages) {
                    currentPage++;
                    $(this).removeClass("disabled");
                    $(this).addClass("active");
                    $("#1").removeClass("active");
                    $("#2").removeClass("active");
                    $("#3").removeClass("active");
                    $("#prevBtn").removeClass("active");
                    showPage(currentPage);

                    if (currentPage == 2)
                    {
                        $("#2").addClass("active");
                    }
                    else if (currentPage == 3)
                    {
                        $("#3 ").addClass("active");
                    }
                }
            });

            $("#search").on("input", function () {
                var searchvalue = $(this).val().toLowerCase();

                var filteredrow = $("#viewtable tbody tr").filter(function ()
                {
                  return $(this).text().toLowerCase().indexOf(searchvalue) > -1;
                });

                $("#viewtable tbody tr").hide();
                filteredrow.slice(0, 10).show();
            });

            $("#create_user").click(function () {
                console.log("click");
                $("#CreateModal").modal('show')
            });


        $("#countryDropdown").change(function () {
           var countryId = $(this).val();
            if (countryId) {
      $.ajax({
        url: '@Url.Action("GetStatesByCountry", "Home")',
        type: "GET",
        data: { countryId: countryId },
        success: function (data) {
            var stateDropdown = $("#stateDropdown");
            stateDropdown.empty();
            stateDropdown.append('<option value="">Select a State</option>');

            $.each(data, function (index, state) {
                stateDropdown.append('<option value="' + state.Value + '">' + state.Text + '</option>');
            });
        }
    });
} else {
    $("#stateDropdown").empty();
                $("#stateDropdown").append('<option value="">Select a State</option>');
                $("#CityDropdown").empty();
                $("#CityDropdown").append('<option value="">Select a city</option>');

}
        });


            $("#stateDropdown").change(function () {
            var StateId = $(this).val();
            if (StateId) {
                $.ajax({
                    url: '@Url.Action("GetCityByState", "Home")',
                    type: "GET",
                    data: { StateId: StateId },
                    success: function (data) {
                        var CityDropdown = $("#CityDropdown");
                        CityDropdown.empty();
                        CityDropdown.append('<option value="">Select a City</option>');

                        $.each(data, function (index, City) {
                            CityDropdown.append('<option value="' + City.Value + '">' + City.Text + '</option>');
                        });
                    }
                });
            } else {
                $("#CityDropdown").empty();
                $("#CityDropdown").append('<option value="">Select a city</option>');
            }
            });

            $.ajax(
                {
                    url: '@Url.Action("GetAllCountry", "Home")',
                    type: "GET",
                    success: function (data)
                    {
                        var countryfield = $("#countryDropdown");
                        countryfield.empty();
                        countryfield.append('<option value="">Select a country</option>');
                        $.each(data, function (index, country) {

                            countryfield.append('<option value="' + country.Value + '">' + country.Text + '</option>');
                        })

                    }
                 }
            );


        $("#file").change(function (event) {
            var file = event.target.files[0];

            if (file) {
                var reader = new FileReader();

                reader.onload = function (e)
                {
                    $("#previewImage").attr("src", e.target.result);
                    $("#previewImage").show();
                };

                reader.readAsDataURL(file);
            } else {
                $("#previewImage").hide();
            }
        });

            $("#CreateNewUser").on('submit', function (e) {

                e.preventDefault();
                var formData = new FormData(this);
                for (var pair of formData.entries()) {
                    console.log(pair[0] + ': ' + pair[1]);
                }

                $.ajax({
                    url: '@Url.Action("Index","Home")',
                    type: "POST",
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        if (response.success) {
                            alert("user created successfully");
                            window.location.href = '@Url.Action("ViewUser", "Home")';
                        }
                        else {
                            alert('Error: ' + response.message);
                        }
                    }

                });

            });
        });

       function deleteUser(userId) {
       if (confirm("Are you sure you want to delete this user? Whose id is "+userId)) {
          $.ajax({
            url: '@Url.Action("Delete", "Home")',
            type: "POST",
              data: { Id: userId },
            success: function (response) {
                if (response.success) {
                    alert("User deleted successfully whose name is " + response.Name);
                    window.location.reload();
                } else {
                    alert("Error: " + response.message);
                }
            },
            error: function (xhr, status, error) {
                alert("An error occurred: " + error);
            }
        });
    }
}
</script>
}
<style>
    .pagination {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        gap: 10px;
    }


    #pageInfo {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    #viewtable th,
    #viewtable td {
        text-align: center;
        vertical-align: middle;
    }

    #prevBtn.active {
        background-color: blue;
        color: white;
    }
</style>